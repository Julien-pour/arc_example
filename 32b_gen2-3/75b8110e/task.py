# Correct code (32b_gen3):
def transform(grid):
    output_grid = [[0] * 4 for _ in range(4)]
    for i in range(4):
        for j in range(4):
            if grid[i][j + 4] != 0:
                output_grid[i][j] = grid[i][j + 4]
            elif grid[i + 4][j] != 0:
                output_grid[i][j] = grid[i + 4][j]
            elif grid[i + 4][j + 4] != 0:
                output_grid[i][j] = grid[i + 4][j + 4]
            else:
                output_grid[i][j] = grid[i][j]
    return output_grid


# Not correct code (32b_gen2):
def transform(grid):
    output_grid = [[0] * 4 for _ in range(4)]
    positions = [(0, 4), (0, 5), (0, 6), (0, 7), (1, 4), (1, 5), (1, 6), (1, 7), (2, 4), (2, 5), (2, 6), (2, 7), (3, 4), (3, 5), (3, 6), (3, 7), (4, 0), (4, 1), (4, 2), (4, 3), (5, 0), (5, 1), (5, 2), (5, 3), (6, 0), (6, 1), (6, 2), (6, 3), (7, 0), (7, 1), (7, 2), (7, 3), (4, 4), (4, 5), (4, 6), (4, 7), (5, 4), (5, 5), (5, 6), (5, 7), (6, 4), (6, 5), (6, 6), (6, 7), (7, 4), (7, 5), (7, 6), (7, 7)]
    index_map = {(0, 4): (0, 0), (0, 5): (0, 1), (0, 6): (0, 2), (0, 7): (0, 3), (1, 4): (1, 0), (1, 5): (1, 1), (1, 6): (1, 2), (1, 7): (1, 3), (2, 4): (2, 0), (2, 5): (2, 1), (2, 6): (2, 2), (2, 7): (2, 3), (3, 4): (3, 0), (3, 5): (3, 1), (3, 6): (3, 2), (3, 7): (3, 3), (4, 0): (0, 0), (4, 1): (0, 1), (4, 2): (0, 2), (4, 3): (0, 3), (5, 0): (1, 0), (5, 1): (1, 1), (5, 2): (1, 2), (5, 3): (1, 3), (6, 0): (2, 0), (6, 1): (2, 1), (6, 2): (2, 2), (6, 3): (2, 3), (7, 0): (3, 0), (7, 1): (3, 1), (7, 2): (3, 2), (7, 3): (3, 3), (4, 4): (0, 0), (4, 5): (0, 1), (4, 6): (0, 2), (4, 7): (0, 3), (5, 4): (1, 0), (5, 5): (1, 1), (5, 6): (1, 2), (5, 7): (1, 3), (6, 4): (2, 0), (6, 5): (2, 1), (6, 6): (2, 2), (6, 7): (2, 3), (7, 4): (3, 0), (7, 5): (3, 1), (7, 6): (3, 2), (7, 7): (3, 3)}
    for i, j in positions:
        output_i, output_j = index_map[i, j]
        if output_grid[output_i][output_j] == 0:
            output_grid[output_i][output_j] = grid[i][j]
    return output_grid